#######
#     #  ######  #####   ######   ####   #####      #    #    #  ######
#     #  #       #    #  #       #    #  #    #     #    ##   #  #
######   #####   #    #  #####   #       #    #     #    # #  #  #####
#        #       #####   #       #  ###  #####      #    #  # #  #
#        #       #   #   #       #    #  #   #      #    #   ##  #
#        ######  #    #  ######   ####   #    #     #    #    #  ######

# This file contains initialization values that are specified by the component
# owner. Lines that start with # are ignored as are blank lines. 
#
# Comments after a field are also ignored as long there is a space between
# end of the field and the beginning of the comment.
#
# NOTE: All values are returned as strings to the calling context.
#
# NOTE: NO TABs PLEASE, they should work but spaces are safer.
#
# The calling context is responsible for the conversion of the string into
# the appropriate number if required.   
#
# The file format is as follows:
#   [COMPONENT1_NAME]          comment
#   KEY1 = VALUE
#   KEY2 = VALUE              comment
#   KEY3 = VALUE
#   [COMPONENT2_NAME]
#   KEY1 = VALUE
#   KEY2 = VALUE 
#   .
#   .
#   .
#

[MEM_CLIENT]

# CMPPOOLBASE              The lower limit on the compress pool.  Note the
#                            duplex base size is twice the size of the
#                            CMPPOOLBASE.
# CMPPOOLCEILING           The upper limit on the compress pool
# CMPPOOLGROWTHRESHOLD     The amount of memory which must be available before 
#                            the compress pool can consider growing
# CMPPOOLSIMPLEXGROWTHRATE The % of memory above the growth threshold which a 
#                           simplex compress pool will consume.
# CMPPOOLDUPLEXGROWTHRATE  The % of memory above the growth threshold which a
#                           duplex compress pool will consume.

CMPPOOLBASE               =      512K
CMPPOOLCEILING            =       16M
CMPPOOLGROWTHRESHOLD      =       48M
CMPPOOLSIMPLEXGROWTHRATE  =        12 # %
CMPPOOLDUPLEXGROWTHRATE   =        20 # %

# VIDPOOLSTRIPSIZE         The size of one 600 dpi 8bit 128 scanline size strip
# VIDPOOLNUMSTRIPS         The lower limit on the number of strips we reserve
# VIDPOOLCEILING           The upper limit on the size of the pool in bytes
# VIDPOOLGROWTHTHRESHOLD   The amount of memory which must be available before
#                            the video buffer pool can grow.
# VIDPOOLGROWTHRATE        The number of bytes of memory above the growth threshold
#                            that must be present for each strip we add.  For example:
#                            If the Threshold was 10MB and the grow rate 2MB and we had
#                            20MB installed, we would add an additional 5 strips worth 
#                            of memory to the video buffer pool.
#
#    The size of a strip is found my multipling  STRIPSCANLINESHIGH * STRIPWIDTHINBYTES

VIDPOOLNUMSTRIPS          =         4 # strips
VIDPOOLCEILING            =   2340800
VIDPOOLGROWTHTHRESHOLD    =       64M
VIDPOOLGROWTHRATE         =        4M

# The RD pool is short for Race Decompression.  It's a grizzly only pool used for
#   decompressing video strips in preparation for sending them to the engine.
# RDPOOLSTRIPSIZE           The size of one uncompressed grizzly video strip
# RDPOOLNUMSTRIPS           The lower limit on the number of strips we reserve
# RDPOOLCEILING             The upper limit in bytes that we reserve for the ceiling
# RDPOOLGROWTHTHRESHOLD     The amount of memory which must be available before the
#                             race decomp pool can grow.
# RDPOOLGROWTHRATE          The number of bytes of memory above the growth threshold
#                             that must be present for each video strip we add.
#
#    The size of a strip is found my multipling  STRIPSCANLINESHIGH * STRIPWIDTHINBYTES

RDPOOLNUMSTRIPS           =        23 # strips
RDPOOLCEILING             =   5913600
RDPOOLGROWTHTHRESHOLD     =       64M
RDPOOLGROWTHRATE          =        4M

# JAVAPOOLBASE              The lower limit on the java pool
# JAVAPOOLCEILING           The upper limit on the number of bytes the java pool can 
#                             reserve.  
# JAVAPOOLGROWTHRESHOLD     The amount of memory which must be available before the
#                             java pool can grow.
# JAVAPOOLGROWTHRATE        The % of memory above the growth threshold which the java pool
#                             can consume.
                          
JAVAPOOLBASE              =     2000K
JAVAPOOLCEILING           =     2000K
JAVAPOOLGROWTHRESHOLD     =       30M
JAVAPOOLGROWTHRATE        =        13 # %

# GOLDENBLOCKSIZE           The amount of memory reserved for the golden block
# OUTLINEPOINTSIZE          Size above which we use outlines

GOLDENBLOCKSIZE           =   194560        #(190*1024 )            190    K

# MEMCLIENTSCRAPS           All blocks smaller than this size will be allocated from a
#                             high address.

MEMCLIENTSCRAPS           =      384        #                       384    bytes

# STRIPSCANLINESHIGH        The maximum height of a strip in scanlines
# STRIPWIDTHINBYTES         The maximum width of a strip in bytes
#
#            The calculation for max strip size for the video and race pools is
#                 STRIPSCANLINESHIGH * STRIPWIDTHINBYTES

STRIPSCANLINESHIGH        =       192
STRIPWIDTHINBYTES         =       1232

# CMP_BLOCK_SIZE            All compression blocks are a multiple of this size
#                             See MCCMPLib.c

CMP_BLOCK_SIZE            =       16

# SSA_POOL_SIZE             Amount of memory to reserve for the SSA pool
#                           

SSA_POOL_SIZE             =  0

# OBEX_POOL_SIZE            Amount of memory to reserve for the OBEX pool
#                           

OBEX_POOL_SIZE            =  102400      #(100*1024)

# PERSMEMORYTHRESHOLD
#  For hardware platforms, this tag tells the system how much MINIMUM memory
#  must be reserved for printing.  This is all the memory which is guaranteed
#  to be available for the personality.  Realistically, the personality will
#  have access to much more, but it must be able to perform it's basic tasks
#  within this reserved area.
#
# PERSUXMEMORYTHRESHOLD
#  Similar to the PERSMEMORYTHRESHOLD, this field specifies a separate threshold
#  for simulators.  Hpux platforms require more memory in their personality area.
#
# PERSGROWTH_PER_MB
#  Specifies how much additional memory will be reserved for the personality pool
#  area for each MB of memory over base.  Base is specified in the 
#  SYS_PRODUCT_BASE_RAM field below.  This was done to help compensate for 
#  additional personality resource growth caused by increasing the printer memory.

PERSMEMORYTHRESHOLD       =   12M
PERSUXMEMORYTHRESHOLD     =   40M
PERSGROWTH_PER_MB         =   31K

# DWSBASE                   Minimum amounnt of DWS ( driver workspace ) available to the
#                             driver in a base memory system.
# DWSGROWTHRATE             % of memory over base available to DWS.  This is in addition to
#                             the DWSBASE.

DWSBASE                   =    6M
DWSGROWTHRATE             =   50 %


# Quick Allocator Configuration
#   The quick allocator is an optimization to MCLib for handling small 
#   memory allocations.  The size and quantity of the "bins" in QA 
#   is configurable and needs to adapt to the amount of memory installed
#   in the printer.  
#
# QACONFIG_MEM_SIZES
#   QA can be configured differently based on the amount of 
#   memory installed in the system.  QACONFIG_MEM_SIZES lists the 
#   installed memory that configurations exist for.
#
#   If this line is not present, then the quick allocator will not be initialized.
#   Memory configurations MUST be in ascending order.
#
# QACONFIG_x_NUM
#   Specifies the number of QACONFIG lines to read. x is the number of MB
#   of memory this configuration applies to.  
#
# QACONFIG_x_y
#   Contains a list of ordered pairs of bin sizes and number of elements.
#   The format is,  <binSize>,<numElem>,<nextBinSize>,<nextNumElem>, etc etc
#   The bin sizes must be placed in ascending order.   For Example, in a 
#   sample line, 
#
#       QACONFIG_64_0 = 32,8000,64,3000,96,2500
#
#   8000 blocks of 32 bytes will be created
#   3000 blocks of 64 bytes will be created
#   2500 blocks of 96 bytes will be created
#
#   x refers to the # of MB of memory this configuration applies to
#   y is the next numerical config line number (ie. 0,1,2,...,n)
#

QACONFIG_MEM_SIZES = 64,128

QACONFIG_64_NUM = 1
QACONFIG_64_0 = 32,8000,64,3000,96,2500

QACONFIG_128_NUM = 3
QACONFIG_128_0 =  32,9500,64,3000,96,5000,128,400,160,1000,192,400,224,250
QACONFIG_128_1 =  256,400,288,500,320,550,352,600,384,500,416,400,448,300 
QACONFIG_128_2 =  480,250,512,170,544,500

# The JamRecoveryBase is the memory level above which jam recovery
# auto turns on jam recovery. (Exactly at the jam recovery base,
# jam recovery is off in auto mode.). This value is used by
# persMap and is compared against the installed memory. For a product
# with separate page frame memory, the jam recovery base does not actually
# affect jam recovery, so the base should be set lower than the minimum
# installed memory.
#
#
#
JAM_RECOVERY_BASE         = 16777216


###############################################################################
#
# Used by both font manager and memClient
#

[FONT_MGR]
OUTLINEPOINTSIZE          =       72        # Size above which we use outlines


###############################################################################
#
# SYS_OS_OVERHEAD_BASE_RAM
#   Minimum OS overhead required
#
# SYS_OS_OVERHEAD_PER_MB
#   OS overhead required per extra megabyte of installed memory in the printer.
#   This overhead needs to be multiplied by the number of processes that
#   map in the shared memory heap.  The overhead was measured at approx. 3490
#   bytes per megabyte per process when mapping in the shared heap.
#
# SYS_OS_OVERHEAD_PER_APP
#   This number is number is multiplied by the number of applications found
#   at runtime to adjust the OS overhead.  This number is approx. the sum of
#   the data and bss sections for the following libraries: libdl.so,
#   libstdc++.so, libc.so, libm.so, libgcc.so, MemLib.sl, SrvP.sl, MC.sl,
#   ECOMLib.sl, and CodeTest.sl
#
# SYS_OS_OVERHEAD_JVM
#   Extra OS overhead required if JVM is installed
#
# SYS_OS_OVERHEAD_DEBUG
#   Extra OS overhead required for debug builds (hpux & hw_debug variants)
#
# SYS_PRODUCT_BASE_RAM
#   Minimum memory shipped in the base product
#
# SYS_PRODUCT_BASE_RAM_JVM
#   Minimum memory that must be installed to support JVM
#
# SYS_RES_RESERVE
#   Memory that the memClient component should reserve for the SysResAlloc pool
#
# SYS_RES_RESERVE_JVM
#   Extra memory required in the SysResAlloc pool when JVM is installed
#
# SYS_RES_RESERVE_DEBUG
#   Extra memory required in the SysResAlloc pool for debug builds (hpux &
#     hw_debug variants)
#
# SYS_RES_SIM_HEAP_SIZE
#   Max size of the shared memory heap for the hpux simulator
#
# SYS_RES_HW_HEAP_SIZE
#   Max size of the shared memory heap for the hardware variants
#

[SYS]
SYS_OS_OVERHEAD_BASE_RAM =     1224K
SYS_OS_OVERHEAD_PER_MB   =      3490
SYS_OS_OVERHEAD_PER_APP  =      650K
SYS_OS_OVERHEAD_JVM      =       24K
SYS_OS_OVERHEAD_DEBUG    =        1M
SYS_PRODUCT_BASE_RAM     =       64M
SYS_PRODUCT_BASE_RAM_JVM =       64M
SYS_RES_RESERVE          =     1800K
SYS_RES_RESERVE_PER_MB   =     31457
SYS_RES_RESERVE_JVM      =       50K
SYS_RES_RESERVE_DEBUG    =      512K
SYS_RES_SIM_HEAP_SIZE    =      164M
SYS_RES_HW_HEAP_SIZE     =      512M


[ACCESS_ARCH]
FW_DIR_REV = lj4300_1.00
CHAIVM_APPLICATION = JVM_DEFAULT_APP  # Start Default App for Direct Connect Browsing

[FILE_ATTRIBUTES]
REVISION_DATE = 20000527

[PRODUCT_IDENTIFICATION]
################################################################################
# Product Identification Variables
# --------------------------------
# o Where there needs to be an embedded space, use underscore.  The code
#   that deals with product identification maps each '_' (underscore)
#   back to ' ' (space) in the actual value stored in shared memory.
# o All text specified here is *NOT* localized.  The only way to localize
#   text is to put it in the files "/fw/subsystems/loc/loc/<language>.loc".
# o For further information on how these values are made available to
#   runtime firmware, see "/fw/subsystems/sys/pub/SrvpRevstring.h".
#
# Marketing-Driven Variables
# --------------------------
# o The values for these variables are subject to the whims of Marketing.
# o These are typically printed on internal pages.
# o Per the HP invent brand identity standards:
#   o Font should be HP Futura, preferably Book or Heavy, or the closest
#     reasonable font available (e.g., Univers).
#   o Heads, subheads, and product name labels on actual products, are all
#     lower case, including "hp", except "LaserJet".  For a product label,
#     the "hp" should also be bold or heavy weight.
# o Therefore, in a product name like "hp color LaserJet 9500mfp":
#   o "hp" is lower case, preferably in bold or heavy weight.
#   o "color" is all lower case.
#   o "LaserJet" remains with the "L" and the "J" in upper case.
#   o "mfp" is all lower case.  (Multi-Function Peripheral)  It follows the
#     product name number, with no intervening spaces.  Example: "9000mfp".
#
DEFAULT_MARKETING_PRODUCT_NAME          = hp_LaserJet
DEFAULT_MARKETING_PRODUCT_NAME_NUMBER   = 4300
#
###  URGENT!
###  URGENT!  Pay attention to the comments below!
###  URGENT!  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
#
# Backward-Compatibility-Driven Variables
# ---------------------------------------
# o These values get hard-coded into printer drivers, network
#   administration programs, and who knows what else.  Therefore,
#   it is *CRITICAL* that these not be changed in any way except
#   to define a new product, in a form that is compatible with
#   past products and conventions!
# o These are fetched as the default values by systemVariables.
# o Upper/Lower Case *MUST* remain as-is!
# o Monochrome printers *DO* have "Series" at the end.
# o Color printers DO *NOT* have "Series" at the end.
# o Remember that the underscores here get mapped to spaces.
#
DEFAULT_NETWORK_PRINTER_NAME            = hp_LaserJet_4300
#
###  URGENT!  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
###  URGENT!  Pay attention to the comments above!
###  URGENT!
#
# Device ID Template
# ------------------
# o This value is fetched by the IoMgr Component and used in constructing the
#   printer device ID string. Due to the way plug and play ID's are calculated
#   this template may need to be modified in the event of plug and play ID
#   collisions. If this is the case the default mechanism is to add an underscore
#   character in the position where the space character," ", should be. This
#   is due to the fact that spaces are not permitted as values in this file. Another
#   character not allowed is the colon ':' character. It will be substituted with
#   exclamation '!' character. See the below example.
#
# o Example1
#   --------
#   unmodified device ID -->  MFG:Hewlett-Packard;CMD:PJL,MLC,%s;%sMDL:%s;CLS:PRINTER;DES:Hewlett-Packard %s;
#   modified w/char replace --> MFG!Hewlett-Packard;CMD!PJL,MLC,%s;%sMDL!%s;CLS!PRINTER;DES!Hewlett-Packard_%s;
#
# o Example2
#   --------
#   DEFAULT_DEVICEID_TEMPLATE = MFG!Hewlett-Packard;CMD!PJL,MLC,%s;%sMDL!%s;CLS!PRINTER;DES!Hewlett-Packard_%s;
#
#  If there was a plug and play id collision, a space would need to be added
#  after the %s following the MDL field, so the new template would look like
#  the following:
#
#  DEFAULT_DEVICEID_TEMPLATE = MFG!Hewlett-Packard;CMD!PJL,MLC,%s;%sMDL!%s_;CLS!PRINTER;DES!Hewlett-Packard_%s;
#
DEFAULT_DEVICEID_TEMPLATE = MFG!Hewlett-Packard;CMD!PJL,MLC,%s;%sMDL!%s;CLS!PRINTER;DES!Hewlett-Packard_%s;
##############################################################################
